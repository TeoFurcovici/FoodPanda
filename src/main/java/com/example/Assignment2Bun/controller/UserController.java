package com.example.Assignment2Bun.controller;

import com.example.Assignment2Bun.model.*;
import com.example.Assignment2Bun.model.dto.DTOUser;
import com.example.Assignment2Bun.model.dto.OrderDTO;
import com.example.Assignment2Bun.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

@RestController // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserService userService;
    @Autowired
    private RestaurantService restaurantService;
    @Autowired
    private CategoryService categoryService;
    @Autowired
    private FoodService foodService;
    @Autowired
    private OrderService orderService;
    final String secretKey = "JHKLXABYZC!!!!";
    private static final Logger LOGGER = LoggerFactory.getLogger(User.class);
    private static final ResponseEntity<RegularUser> SUCCESS_RESPONSE = new ResponseEntity<>(HttpStatus.OK);
    private static final ResponseEntity<RegularUser> FAILURE_RESPONSE = new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody DTOUser dtoUser) throws Exception {
        CipherDecrypt cipherDecrypt= new CipherDecrypt();
        String encryptedPassUser= cipherDecrypt.encrypt(dtoUser.getPassword(),secretKey);
        RegularUser n = new RegularUser(dtoUser.getFirstName(), dtoUser.getLastName(), dtoUser.getEmail(), encryptedPassUser,dtoUser.getUsername(), dtoUser.getIsAdmin());
        if(!userService.findByUsername(dtoUser.getUsername()).isPresent()) {
            userService.save(n);
            return "Saved";
        }
        return  "Already exists user";
    }
    @GetMapping(path="/findUserByUsername/{username}")
    public ResponseEntity<User>  findUserByUsername (@PathVariable String username) {
        Optional<User> regularUser= userService.findByUsername(username);
        CipherDecrypt cipherDecrypt= new CipherDecrypt();
        String decryptPass= cipherDecrypt.decrypt(regularUser.get().getPassword(),secretKey);
        regularUser.get().setPassword(decryptPass);
        return  ResponseEntity.status(HttpStatus.OK).body(regularUser.orElse(new User()));

    }
    @Transactional
    @DeleteMapping(path="/deleteUserByUsername/{username}")
    public ResponseEntity<RegularUser>  deleteUserByUsername (@PathVariable String username) {

        try {
            userService.deleteByUsername(username);
            return SUCCESS_RESPONSE;

        } catch (IllegalArgumentException e) {
            LOGGER.error("Failed to delete user with username = " + username, e.getMessage());
            return FAILURE_RESPONSE;
        }

    }

    @GetMapping(path="/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userService.findAll();
    }
    @GetMapping(path="/allRestaurantsUser")
    public Iterable<Restaurant>   allRestaurants() {
        return  restaurantService.findAll();

    }

    @GetMapping(path="/getCategoriesFromARestaurantUser/{name}")
    public ResponseEntity<List<Category>>  findCategoriesFromRestaurant(@PathVariable  String name) {
        Optional<Restaurant> restaurant= restaurantService.findByName(name);
        return ResponseEntity.status(HttpStatus.OK).body(restaurant.get().getMenu().getCategoryList());

    }
    @GetMapping(path="/getFoodFromACategoryUser/{name}")
    public ResponseEntity<List<Food>>  findFoodByCategoryUser(@PathVariable  String name) {
        Optional<Category> category= categoryService.findByName(name);
        List<Food> intermidiateFood= new ArrayList<>();
        for (Food food: category.get().getFoodList()) {
            Food newFood= new Food(food.getName(),food.getDescription(),food.getPrice());
            intermidiateFood.add(newFood);
        }
        return ResponseEntity.status(HttpStatus.OK).body(intermidiateFood);
    }
    @GetMapping(path="/addFoodToCart/{id}")
    public @ResponseBody Double addToOrder (@PathVariable int id ) {
        Optional<Order> order= orderService.findByOrderId(id);
        return order.get().getTotalPrice();
    }
    @PostMapping(path="/placeOrder")
    public @ResponseBody Order placeOrder (@RequestBody  OrderDTO orderDTO) {
        Optional<Restaurant> restaurant= restaurantService.findByName(orderDTO.getRestaurantName());
        String str = orderDTO.getFoodNames();
        String[] stringList= str.split(",");

        List<Food> foodListForOrder= new ArrayList<>();
        for (String str1: stringList) {
            Optional <Food> food= foodService.findByName(str1);
            foodListForOrder.add(food.get());
        }
        Optional<User> user= userService.findByUsername(orderDTO.getClientUsername());
        Order order= new Order(foodListForOrder,user.get(),restaurant.get());
        restaurant.get().addOrder(order);
        order.getClient().addOrder(order);
        Double lastUpdatedPrice= order.calculatePrice();
        order.setTotalPrice(lastUpdatedPrice);
        order.setOrderStatus(OrderStatus.PENDING);
        order.attach(restaurant.get().getAdmin());
        order.notifyUpdate("A new order with total price: " +order.getTotalPrice() + "  was placed  at restaurant " +restaurant.get().getName() );
        orderService.save(order);
        System.out.println(order.getTotalPrice());
        return  order;

    }
    @GetMapping(path="/menuForSelectedRestaurant/{restName}")
    public Menu menuForSelectedRestaurant(@PathVariable String restName) {
        Optional<Restaurant> restaurant= restaurantService.findByName(restName);
        return (restaurant.get().getMenu());

    }
    @GetMapping(path="/getAllOrdersForAClient/{clientUsername}")
    public List<Order> getStatusOfTheOrder(@PathVariable String clientUsername) {
        Optional<User> user= userService.findByUsername(clientUsername);
        List<Order> orderForClient=new ArrayList<>();
        orderForClient.addAll(user.get().getClientOrders());
        return (orderForClient);

    }
    @GetMapping(path="/findRestaurantsByName/{restName}")
    public Iterable<Restaurant> findRestaurantsByName  (@PathVariable String restName) {
        return  restaurantService.findByNameContains(restName);

    }



}
